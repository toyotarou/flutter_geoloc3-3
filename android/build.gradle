// ✅ 各種 Gradle プラグインのバージョン定義（適用は false にしてモジュール側で apply）
plugins {
    id("com.android.application") version "8.2.2" apply false     // アプリ用の Android プラグイン
    id("org.jetbrains.kotlin.android") version "1.9.22" apply false  // Kotlin Android プラグイン
    id("com.google.devtools.ksp") version "1.9.22-1.0.18" apply false // KSP（Roomなどのコード生成）
    id("com.google.dagger.hilt.android") version "2.51.1" apply false // Hilt（依存注入）
}

// ✅ すべてのプロジェクトで使用するリポジトリを定義（Maven Central や Google）
allprojects {
    repositories {
        google()
        mavenCentral()
    }
}

// ✅ 特殊処理: isar_flutter_libs モジュールに namespace を設定（namespace未指定対策）
subprojects { sub ->
    if (sub.name == "isar_flutter_libs") {
        sub.afterEvaluate {
            if (sub.plugins.hasPlugin("com.android.library")) {
                // ✅ ライブラリに namespace がないとビルドエラーになるため設定
                sub.android { namespace "com.github.isar_flutter_libs" }
            }
        }
    }
}

// ✅ 特殊処理: isar_flutter_libs の AndroidManifest.xml の package 属性を削除
subprojects { sub ->
    if (sub.name == "isar_flutter_libs") {
        sub.afterEvaluate {
            def mf = file("${sub.projectDir}/src/main/AndroidManifest.xml")
            if (mf.exists()) {
                // ✅ 重複 package 属性を削除（Flutter + isar の既知の問題対策）
                mf.text = mf.text.replace('package="dev.isar.isar_flutter_libs"', '')
            }
        }
    }
}

// ✅ ルートプロジェクトのビルド出力ディレクトリを指定
rootProject.buildDir = '../build'

// ✅ 各サブプロジェクトに共通のビルド設定を適用
subprojects {
    afterEvaluate { project ->
        // ✅ アプリまたはライブラリであれば compileSdk と buildTools を設定
        if (project.plugins.hasPlugin("com.android.application") ||
                project.plugins.hasPlugin("com.android.library")) {
            project.android {
                compileSdkVersion 35
                buildToolsVersion "34.0.0"
            }
        }

        // ✅ namespace 未指定のプロジェクトに group を使って補完
        if (project.hasProperty("android")) {
            project.android {
                if (namespace == null) {
                    namespace project.group
                }
            }
        }
    }

    // ✅ 各モジュールの build 出力を一元化（../build/モジュール名）
    project.buildDir = "${rootProject.buildDir}/${project.name}"
}
